import { Markup, Scenes } from "telegraf";
import { APP_SCENES } from "../../../types";
import { message } from "telegraf/filters";
import { connnectRabbit, produce } from "../../../producer";

interface ICategoryPayload {
  action: string;
  data: string;
}

const categoryCreate = new Scenes.BaseScene<Scenes.SceneContext>(
  APP_SCENES.CREATE_CATEGORY
);

categoryCreate.enter(async (ctx) => {
  ctx.reply(
    "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
    Markup.inlineKeyboard([
      Markup.button.callback("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üìÑ", "view"),
      Markup.button.callback("–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚¨ÖÔ∏è", "start"),
    ])
  );
});

categoryCreate.on(message("text"), async (ctx) => {
  const { channel, connection } = await connnectRabbit();

  const message = ctx.message.text;

  if (!message) return;

  const payload = {
    action: "/create_category",
    data: message,
  };

  const sentMessage = await produce<ICategoryPayload>(
    APP_SCENES.CREATE_CATEGORY,
    channel,
    connection,
    payload
  );

  if (sentMessage) {
    ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${message} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ`);

    return;
  }

  ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚ùå");

  ctx.scene.leave();

  ctx.scene.enter(APP_SCENES.CREATE_CATEGORY);
});

export default categoryCreate;
